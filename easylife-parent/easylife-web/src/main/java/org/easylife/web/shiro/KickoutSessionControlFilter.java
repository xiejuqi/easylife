package org.easylife.web.shiro;

import java.io.Serializable;
import java.util.Deque;
import java.util.LinkedList;

import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;

import org.apache.shiro.cache.Cache;
import org.apache.shiro.cache.CacheManager;
import org.apache.shiro.session.Session;
import org.apache.shiro.session.mgt.DefaultSessionKey;
import org.apache.shiro.session.mgt.SessionManager;
import org.apache.shiro.subject.Subject;
import org.apache.shiro.web.filter.AccessControlFilter;
import org.apache.shiro.web.util.WebUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;



/**
 * 
 * @Filename KickoutSessionControlFilter.java
 * 
 * @Description	踢出用户过滤器,但是实现提示会员重复登录的功能。
 * 
 * @Version 1.0
 * 
 * @Author xpangxie
 * 
 * @Email xpangxie@yiji.com
 * 
 * @History Author: xpangxie
 * 
 * @Date: 2016年4月20日 上午10:10:57
 * 
 * @Version: 1.0
 * 
 * @Content: create
 * 
 */
public class KickoutSessionControlFilter extends AccessControlFilter {

	private String kickoutUrl; // 踢出后到的地址
	private boolean kickoutAfter = false; // 踢出之前登录的/之后登录的用户 默认踢出之前登录的用户
	private int maxSession = 1; // 同一个帐号最大会话数 默认1

	private SessionManager sessionManager;
	private Cache<String, Deque<Serializable>> cache;
	
	private final Logger logger = LoggerFactory.getLogger(EasylifeCredentiasMatcher.class);

	@Override
	protected boolean isAccessAllowed(ServletRequest request, ServletResponse response, Object mappedValue)
			throws Exception {
		return false;
	}

	@Override
	protected boolean onAccessDenied(ServletRequest request, ServletResponse response) throws Exception {
		
		Subject subject = getSubject(request, response);
		if (!subject.isAuthenticated() && !subject.isRemembered()) {
			/**如果没有登录，直接进行之后的流程*/
			return true;
		}
		
		Session session = subject.getSession();
		Serializable sessionId = session.getId();
		
		String username = (String) subject.getPrincipal();
		
		/**同步控制*/
		Deque<Serializable> deque = cache.get(username);
		if (deque == null) {
			deque = new LinkedList<Serializable>();
			cache.put(username, deque);
		}
		
		/**如果队列里没有此sessionId，且用户没有被踢出；放入队列*/
		if (!deque.contains(sessionId) && session.getAttribute("kickout") == null) {
			deque.push(sessionId);
		}

		/**如果队列里的sessionId数超出最大会话数，开始踢人*/
		while (deque.size() > maxSession) {
			Serializable kickoutSessionId = null;
			if (kickoutAfter) { 
				/**如果踢出后者*/
				kickoutSessionId = deque.removeFirst();
			} else { 
				/**否则踢出前者*/
				kickoutSessionId = deque.removeLast();
			}
			try {
				Session kickoutSession = sessionManager.getSession(new DefaultSessionKey(kickoutSessionId));
				boolean b = session == kickoutSession;
				if (kickoutSession != null) {
					/**设置会话的kickout属性表示踢出了*/
					kickoutSession.setAttribute("kickout", true);
				}
			} catch (Exception e) {
				logger.error("[踢出用户发生异常,e={}]",e.getMessage());
			}
		}

		if (session.getAttribute("kickout") != null) {
			/**会话被踢出了*/
			try {
				subject.logout();
				saveRequest(request);
				WebUtils.issueRedirect(request, response,kickoutUrl);
				return false;
			} catch (Exception e) {
				logger.error("[踢出用户发生异常,e={}]",e.getMessage());
			}
		}
		return true;
	}
	
	public void setKickoutUrl(String kickoutUrl) {
		this.kickoutUrl = kickoutUrl;
	}

	public void setKickoutAfter(boolean kickoutAfter) {
		this.kickoutAfter = kickoutAfter;
	}

	public void setMaxSession(int maxSession) {
		this.maxSession = maxSession;
	}

	public void setSessionManager(SessionManager sessionManager) {
		this.sessionManager = sessionManager;
	}

	public void setCacheManager(CacheManager cacheManager) {
		this.cache = cacheManager.getCache("shiro-kickout-session");
	}

}
